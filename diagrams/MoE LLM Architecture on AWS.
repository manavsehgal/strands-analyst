digraph {
	rankdir=TB
	node [fontname=Arial shape=record]
	edge [fontname=Arial fontsize=10]
	graph [ranksep=0.5]
	TrainingPipeline [label="{TrainingPipeline|- dataStorage: S3\n- highSpeedStorage: FSx for Lustre\n- orchestrator: SageMaker HyperPod\n- computeInstances: EC2 P5e/Trn2\n- networking: EFA (400 GBPS)\n- monitoring: CloudWatch/Prometheus/Grafana|+ setupCluster(instanceType, count): Cluster\n+ trainModel(modelConfig): ModelArtifact\n+ monitorTraining(): Metrics\n+ handleFailure(): AutoRecovery}" shape=record]
	MoEModel [label="{MoEModel|- totalParameters: 671B\n- activeParameters: 37B\n- expertsPerModule: 256\n- activeExpertsPerToken: 9\n- attentionMechanism: Multi-Head Latent Attention|+ routeToken(token): ExpertSelection\n+ forwardPass(input): Output\n+ cacheKVValues(): MemoryOptimization\n+ loadExperts(tokenContext): ExpertActivation}" shape=record]
	InferencePipeline [label="{InferencePipeline|- modelStorage: S3\n- computeInstances: EC2 Inf2\n- kvCache: ElastiCache Redis\n- inactiveExpertStorage: S3 Intelligent Tiering\n- loadBalancer: Application Load Balancer\n- endpoint: API Gateway/Bedrock|+ serveRequest(prompt): Response\n+ routeToExperts(token): ExpertSelection\n+ cacheFrequentExperts(): CacheOptimization\n+ scaleInference(demand): AutoScaling}" shape=record]
	ExpertModule [label="{ExpertModule|- expertCount: 256\n- sharedParameters: Boolean\n- specialization: Domain\n- activationThreshold: Float|+ activate(token): Boolean\n+ compute(input): Output\n+ updateWeights(gradient): WeightUpdate}" shape=record]
	RouterMechanism [label="{RouterMechanism|- routingAlgorithm: String\n- topKExperts: 9\n- loadBalancing: Boolean\n- capacityFactor: Float|+ selectExperts(token): List<Expert>\n+ balanceLoad(): LoadDistribution\n+ optimizeRouting(): RoutingEfficiency}" shape=record]
	MemoryManager [label="{MemoryManager|- kvCacheCompression: Boolean\n- expertCachingStrategy: String\n- coldExpertStorage: S3\n- hotExpertCache: ElastiCache|+ compressKVCache(): MemoryReduction\n+ cacheFrequentExperts(): CacheHitRate\n+ retrieveExpert(expertId): Expert\n+ optimizeMemoryUsage(): MemoryEfficiency}" shape=record]
	ResilienceFramework [label="{ResilienceFramework|- deepHealthCheck: NVIDIA DCGM\n- autoRecovery: Boolean\n- checkpointFrequency: Integer\n- sparePool: AWS-maintained|+ monitorHardware(): HealthStatus\n+ replaceFailedNode(): NodeReplacement\n+ resumeFromCheckpoint(): TrainingContinuation\n+ validateClusterHealth(): ClusterStatus}" shape=record]
	MonitoringSystem [label="{MonitoringSystem|- metrics: CloudWatch\n- visualization: Grafana\n- collection: Prometheus\n- customMetrics: GPU/Temperature/Power|+ trackUtilization(): UtilizationMetrics\n+ visualizePerformance(): Dashboard\n+ alertOnAnomaly(): Alert\n+ optimizeResources(): ResourceOptimization}" shape=record]
	TrainingPipeline -> MoEModel [label=""]
	TrainingPipeline -> ResilienceFramework [arrowhead=diamond style=filled]
	TrainingPipeline -> MonitoringSystem [arrowhead=diamond style=filled]
	MoEModel -> ExpertModule [arrowhead=diamond style=filled]
	MoEModel -> RouterMechanism [arrowhead=diamond style=filled]
	InferencePipeline -> MoEModel [label=""]
	InferencePipeline -> MemoryManager [arrowhead=diamond style=filled]
	InferencePipeline -> MonitoringSystem [arrowhead=diamond style=filled]
	MemoryManager -> ExpertModule [label=""]
	RouterMechanism -> ExpertModule [label=""]
	ResilienceFramework -> TrainingPipeline [label=""]
}

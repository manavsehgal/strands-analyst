import os
from datetime import datetime
from pathlib import Path
from urllib.parse import urlparse
from strands import Agent
from strands.models.bedrock import BedrockModel
from ..tools import fetch_url_metadata
from ..prompts import format_prompt_cached
from ..utils import print_metrics
from ..config import get_sitemeta_output_dir, get_sitemeta_save_markdown, get_bedrock_config_for_agent


def create_sitemeta_agent():
    """Create and return an agent configured for site metadata analysis with Bedrock optimizations."""
    # Get optimized Bedrock configuration for this agent
    bedrock_config = get_bedrock_config_for_agent('sitemeta')
    
    # Create optimized Bedrock model
    bedrock_model = BedrockModel(
        model_id=bedrock_config['model_id'],
        temperature=bedrock_config['temperature'],
        top_p=bedrock_config['top_p'],
        max_tokens=bedrock_config['max_tokens'],
        stop_sequences=bedrock_config['stop_sequences'],
        streaming=bedrock_config['streaming'],
        region_name=bedrock_config['region_name']
    )
    
    # Add optional features if configured
    if bedrock_config['guardrail_id']:
        bedrock_model.guardrail_id = bedrock_config['guardrail_id']
    
    # Create agent with optimized model and tools
    return Agent(
        model=bedrock_model,
        tools=[fetch_url_metadata]
    )


def _save_response_to_markdown(url: str, response_text: str, output_dir: str = None) -> str:
    """
    Save the agent response as a well-formatted markdown file.
    
    Args:
        url: The URL that was analyzed
        response_text: The agent's response text
        output_dir: Optional output directory (uses config default if not provided)
    
    Returns:
        Path to the created markdown file
    """
    if output_dir is None:
        output_dir = get_sitemeta_output_dir()
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Parse URL to extract domain and TLD
    parsed_url = urlparse(url if url.startswith('http') else f'https://{url}')
    domain_parts = parsed_url.netloc.lower().split('.')
    
    # Create filename: domain-tld-meta-yyyy-mm-dd.md
    if len(domain_parts) >= 2:
        domain = domain_parts[-2]  # Second to last part (e.g., 'google' from 'www.google.com')
        tld = domain_parts[-1]     # Last part (e.g., 'com')
    else:
        domain = domain_parts[0] if domain_parts else 'unknown'
        tld = 'unknown'
    
    date_str = datetime.now().strftime('%Y-%m-%d')
    filename = f"{domain}-{tld}-meta-{date_str}.md"
    filepath = Path(output_dir) / filename
    
    # Create markdown content with frontmatter
    markdown_content = f"""---
url: {url}
domain: {domain}.{tld}
analyzed_on: {datetime.now().isoformat()}
analysis_type: site_metadata
---

# Site Analysis: {domain}.{tld}

**URL:** {url}  
**Analyzed on:** {datetime.now().strftime('%B %d, %Y')}

## Analysis Results

{response_text}

---
*Generated by Strands Analyst*
"""
    
    # Save to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    return str(filepath)


def sitemeta(url: str, agent=None, save_markdown: bool = None, output_dir: str = None):
    """
    Analyze a website and return site metadata and insights about what the company does.
    
    Args:
        url: The URL to analyze
        agent: Optional pre-configured agent. If None, creates a new one.
        save_markdown: Whether to save response as markdown. Uses config default if None.
        output_dir: Output directory for markdown file. Uses config default if None.
    
    Returns:
        Result object from the agent
    """
    if agent is None:
        agent = create_sitemeta_agent()
    
    message = format_prompt_cached("sitemeta", url=url)
    
    result = agent(message)
    
    # Save to markdown if configured to do so
    if save_markdown is None:
        save_markdown = get_sitemeta_save_markdown()
    
    if save_markdown and result:
        try:
            filepath = _save_response_to_markdown(url, str(result), output_dir)
            # Add the saved filepath to the result for reference
            if hasattr(result, 'metadata'):
                result.metadata = getattr(result, 'metadata', {})
                result.metadata['saved_to'] = filepath
        except Exception as e:
            print(f"Warning: Could not save markdown file: {e}")
    
    return result


# Use the utility function for printing metrics
def print_result_metrics(result, agent):
    """Print metrics about the agent's result."""
    print_metrics(result, agent)


# Example usage when run directly
if __name__ == "__main__":
    agent = create_sitemeta_agent()
    result = sitemeta("https://decagon.ai/", agent)
    print_result_metrics(result, agent)
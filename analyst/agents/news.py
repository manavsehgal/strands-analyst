import os
from datetime import datetime
from pathlib import Path
from urllib.parse import urlparse
from strands import Agent
from ..tools import fetch_rss_content
from ..config import get_config, get_news_output_dir, get_news_save_markdown
from ..prompts import format_prompt_cached
from ..utils import print_metrics


def create_news_agent():
    """Create and return an agent configured for RSS news analysis."""
    # Create an agent with custom RSS tool
    return Agent(tools=[fetch_rss_content])


def _save_response_to_markdown(rss_url: str, response_text: str, output_dir: str = None) -> str:
    """
    Save the news agent response as a well-formatted markdown file.
    
    Args:
        rss_url: The RSS URL that was analyzed
        response_text: The agent's response text
        output_dir: Optional output directory (uses config default if not provided)
    
    Returns:
        Path to the created markdown file
    """
    if output_dir is None:
        output_dir = get_news_output_dir()
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Parse URL to extract domain and TLD
    parsed_url = urlparse(rss_url if rss_url.startswith('http') else f'https://{rss_url}')
    domain_parts = parsed_url.netloc.lower().split('.')
    
    # Create filename: domain-tld-news-yyyy-mm-dd.md
    if len(domain_parts) >= 2:
        domain = domain_parts[-2]  # Second to last part (e.g., 'bbc' from 'feeds.bbc.co.uk')
        tld = domain_parts[-1]     # Last part (e.g., 'uk')
    else:
        domain = domain_parts[0] if domain_parts else 'unknown'
        tld = 'unknown'
    
    date_str = datetime.now().strftime('%Y-%m-%d')
    filename = f"{domain}-{tld}-news-{date_str}.md"
    filepath = Path(output_dir) / filename
    
    # Create markdown content with frontmatter
    markdown_content = f"""---
rss_url: {rss_url}
domain: {domain}.{tld}
analyzed_on: {datetime.now().isoformat()}
analysis_type: news_analysis
---

# News Analysis: {domain}.{tld}

**RSS Feed:** {rss_url}  
**Analyzed on:** {datetime.now().strftime('%B %d, %Y')}

## Latest News

{response_text}

---
*Generated by Strands Analyst*
"""
    
    # Save to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    return str(filepath)


def news(rss_url: str, max_items: int = None, agent=None, save_markdown: bool = None, output_dir: str = None):
    """
    Fetch and analyze RSS feed to return the latest news items.
    
    Args:
        rss_url: The RSS feed URL to process
        max_items: Number of news items to fetch (defaults to config setting)
        agent: Optional pre-configured agent. If None, creates a new one.
        save_markdown: Whether to save response as markdown. Uses config default if None.
        output_dir: Output directory for markdown file. Uses config default if None.
    
    Returns:
        Result object from the agent containing latest news items
    """
    if agent is None:
        agent = create_news_agent()
    
    # Get configuration and set default max_items if not specified
    config = get_config()
    if max_items is None:
        max_items = config.get_rss_default_items()
    
    # Ensure max_items doesn't exceed configured maximum
    max_allowed = config.get_rss_max_items()
    max_items = min(max_items, max_allowed)
    
    message = format_prompt_cached("news", max_items=max_items, rss_url=rss_url)
    
    result = agent(message)
    
    # Save to markdown if configured to do so
    if save_markdown is None:
        save_markdown = get_news_save_markdown()
    
    if save_markdown and result:
        try:
            filepath = _save_response_to_markdown(rss_url, str(result), output_dir)
            # Add the saved filepath to the result for reference
            if hasattr(result, 'metadata'):
                result.metadata = getattr(result, 'metadata', {})
                result.metadata['saved_to'] = filepath
        except Exception as e:
            print(f"Warning: Could not save markdown file: {e}")
    
    return result


# Use the utility function for printing metrics
def print_result_metrics(result, agent):
    """Print metrics about the agent's result."""
    print_metrics(result, agent)


# Example usage when run directly
if __name__ == "__main__":
    agent = create_news_agent()
    # Example with BBC News RSS feed
    result = news("http://feeds.bbci.co.uk/news/rss.xml", agent)
    print_result_metrics(result, agent)
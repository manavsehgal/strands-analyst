#!/usr/bin/env python3
import argparse
import sys
import os
import uuid
from datetime import datetime
from pathlib import Path
from typing import Optional

# Import the enhanced Rich UI version
try:
    from .chat_rich import main as rich_main
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False
    from ..agents.chat import create_chat_agent, chat_with_agent, get_session_info
    from ..config import get_config
    from ..utils import configure_logging


def print_welcome_message():
    """Print the welcome message for the chat interface."""
    print("ü§ñ Analyst Chat - Interactive Analysis Assistant")
    print("=" * 50)
    print()
    print("Available capabilities:")
    print("‚Ä¢ Website analysis and metadata extraction")  
    print("‚Ä¢ RSS feed analysis and news content")
    print("‚Ä¢ Article downloading and content extraction")
    print("‚Ä¢ HTML to Markdown conversion")
    print("‚Ä¢ General analysis and research assistance")
    print()
    print("Type 'help' for commands or 'quit' to exit")
    print("=" * 50)
    print()


def print_help():
    """Print help information for chat commands."""
    print("üìñ Available Commands:")
    print("  help     - Show this help message")
    print("  session  - Show current session information")
    print("  clear    - Clear conversation history") 
    print("  save     - Save current conversation")
    print("  quit     - Exit the chat")
    print()
    print("üí° Tips:")
    print("  - Ask me to analyze websites: 'analyze google.com'")
    print("  - Request RSS feed analysis: 'read this RSS feed: <url>'")
    print("  - Download articles: 'download this article: <url>'")
    print("  - Convert HTML to Markdown: 'convert this HTML to markdown: <content>'")
    print("  - Ask questions about analysis results")
    print()


def print_session_info(agent):
    """Print information about the current session."""
    info = get_session_info(agent)
    print("üìä Session Information:")
    print(f"  Session ID: {info['session_id']}")
    print(f"  Has Session: {info['has_session']}")
    if 'session_dir' in info:
        print(f"  Session Directory: {info['session_dir']}")
    print()


def save_conversation_summary(agent, session_dir: str):
    """Save a summary of the conversation to a file."""
    try:
        session_info = get_session_info(agent)
        session_id = session_info.get('session_id', 'unknown')
        
        # Create summary directory
        summary_dir = Path(session_dir) / "summaries"
        summary_dir.mkdir(parents=True, exist_ok=True)
        
        # Create summary filename
        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f"chat-summary-{session_id[:8]}-{timestamp}.md"
        filepath = summary_dir / filename
        
        # Create summary content
        summary_content = f"""# Chat Session Summary

**Session ID:** {session_id}
**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Session Directory:** {session_dir}

## Session Information
This chat session used the Analyst Chat agent with access to:
- Website analysis tools
- RSS feed analysis tools  
- Article downloading tools
- HTML to Markdown conversion tools

## Notes
- Full conversation history is preserved in the session directory
- This summary was generated at the end of the chat session
- Use the session ID to resume this conversation later

---
*Generated by Strands Analyst Chat*
"""
        
        # Write summary
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(summary_content)
        
        print(f"üíæ Conversation summary saved to: {filepath}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Error saving conversation summary: {e}")


def interactive_chat(agent, args):
    """Run the interactive chat interface."""
    try:
        print_welcome_message()
        
        # Show session info
        if args.verbose:
            print_session_info(agent)
        
        while True:
            try:
                # Get user input
                user_input = input("üó£Ô∏è  You: ").strip()
                
                # Handle empty input
                if not user_input:
                    continue
                
                # Handle special commands
                if user_input.lower() in ['quit', 'exit', 'bye', 'q']:
                    print("üëã Thank you for using Analyst Chat. Goodbye!")
                    if args.save_on_exit:
                        save_conversation_summary(agent, args.session_dir)
                    break
                
                elif user_input.lower() == 'help':
                    print_help()
                    continue
                
                elif user_input.lower() == 'session':
                    print_session_info(agent)
                    continue
                    
                elif user_input.lower() == 'clear':
                    # Note: Conversation clearing would need to be implemented in the agent
                    print("üßπ Conversation history cleared (feature not yet implemented)")
                    continue
                    
                elif user_input.lower() == 'save':
                    save_conversation_summary(agent, args.session_dir)
                    continue
                
                # Send message to agent
                print("ü§ñ Assistant: ", end="", flush=True)
                response = chat_with_agent(agent, user_input, verbose=args.verbose)
                
                if response:
                    print(str(response))
                else:
                    print("I encountered an error processing your request. Please try again.")
                
                print()  # Add spacing between exchanges
                
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                if args.save_on_exit:
                    save_conversation_summary(agent, args.session_dir) 
                break
            except EOFError:
                print("üëã Goodbye!")
                if args.save_on_exit:
                    save_conversation_summary(agent, args.session_dir)
                break
                
    except Exception as e:
        print(f"‚ùå Error in chat session: {e}", file=sys.stderr)
        sys.exit(1)


def single_message_mode(agent, message: str, args):
    """Handle single message mode."""
    response = chat_with_agent(agent, message, verbose=args.verbose)
    if response:
        print(str(response))
    else:
        print("Error processing your request.", file=sys.stderr)
        sys.exit(1)


def main():
    """Main CLI entry point for the analystchat command."""
    # Check if --use-legacy flag is present to force legacy mode
    if '--use-legacy' not in sys.argv and RICH_AVAILABLE:
        # Use the enhanced Rich UI version by default
        return rich_main()
    
    parser = argparse.ArgumentParser(
        description="Interactive chat interface for AI-powered analysis with multi-turn conversations.",
        prog="analystchat"
    )
    parser.add_argument(
        "message",
        nargs="*",
        help="Optional message to send (if provided, runs in single-message mode)"
    )
    parser.add_argument(
        "--session-id", "-s",
        help="Use specific session ID (generates new one if not provided)"
    )
    parser.add_argument(
        "--session-dir", "-d",
        default="refer/chat-sessions",
        help="Directory to store chat sessions (default: refer/chat-sessions)"
    )
    parser.add_argument(
        "--window-size", "-w",
        type=int,
        default=20,
        help="Conversation window size for context management (default: 20)"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Show detailed metrics and session information"
    )
    parser.add_argument(
        "--no-logging",
        action="store_true", 
        help="Disable logging output"
    )
    parser.add_argument(
        "--save-on-exit",
        action="store_true",
        help="Automatically save conversation summary when exiting"
    )
    parser.add_argument(
        "--use-legacy",
        action="store_true",
        help="Use legacy interface instead of Rich UI"
    )
    
    args = parser.parse_args()
    
    try:
        # Configure logging
        if not args.no_logging:
            configure_logging(verbose=args.verbose)
        
        # Create session directory
        Path(args.session_dir).mkdir(parents=True, exist_ok=True)
        
        # Create chat agent
        agent = create_chat_agent(
            session_id=args.session_id,
            session_dir=args.session_dir,
            window_size=args.window_size,
            enable_logging=not args.no_logging
        )
        
        # Determine mode based on arguments
        if args.message:
            # Single message mode
            message = " ".join(args.message)
            single_message_mode(agent, message, args)
        else:
            # Interactive mode
            interactive_chat(agent, args)
            
    except Exception as e:
        print(f"‚ùå Failed to start chat: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()